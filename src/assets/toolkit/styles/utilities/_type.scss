//
// Type Utilities
//

$include-html-type-classes: $include-html-classes;

// Text alignment class names
$align-class-names:
  small-only,
  small,
  medium-only,
  medium,
  large-only,
  large,
  xlarge-only,
  xlarge,
  xxlarge-only,
  xxlarge;

// Text alignment breakpoints
// $align-class-breakpoints:
//   $small-only,
//   $small-up,
//   $medium-only,
//   $medium-up,
//   $large-only,
//   $large-up,
//   $xlarge-only,
//   $xlarge-up,
//   $xxlarge-only,
//   $xxlarge-up;
  
// Generates text align and justify classes
@mixin align-classes{
  .text-left    { text-align: left !important; }
  .text-right   { text-align: right !important; }
  .text-center  { text-align: center !important; }
  .text-justify { text-align: justify !important; }

  @for $i from 1 through length($align-class-names) {
    @media #{(nth($align-class-breakpoints, $i))} {
      .#{(nth($align-class-names, $i))}-text-left { text-align: left !important; }
      .#{(nth($align-class-names, $i))}-text-right   { text-align: right !important; }
      .#{(nth($align-class-names, $i))}-text-center  { text-align: center !important; }
      .#{(nth($align-class-names, $i))}-text-justify { text-align: justify !important; }
    }
  }
}

// @include exports("type") {
//   @if $include-html-type-classes {
//     // Responsive Text alignment
//     @include align-classes;
//   }
// }

$type-weight: (
  light: 300,
  regular: 400,
  semi: 500,
  bold: 700,
  black: 800
);

// A simple type-weight mixin
// ex. @include type-weight(strong);
@mixin type-weight($weight) {
  font-weight: map-get($type-weight, $weight);
}

// config/_typography.scss
$text-sizing: (
  quark: (
    small: (
      font-size: .6875rem, // 11px
      line-height: 1.25
    )
  ),
  micro: (
    small: (
      font-size: .75rem, // 12px
      line-height: 1.25
    )
  ),
  tiny: (
    small: (
      font-size: .8125rem, // 13px
      line-height: 1.25
    )
  ),
  small: (
    small: (
      font-size: .875rem, // 14px
      line-height: 1.375
    )
  ),
  base: (
    small: (
      font-size: 1rem, // 16px
      line-height: 1.3125
    )
  ),
  epsilon: (
    small: (
      font-size: 1.1255rem, // 18px
      line-height: 1.5
    )
  ),
  delta: (
    small: (
      font-size: 1.1255rem, // 18px
      line-height: 1.25
    ),
    medium: (
      font-size: 1.25rem, // 20px
      line-height: 1.25
    )
  ),
  gamma: (
    small: (
      font-size: 1.375rem, // 22px
      line-height: 1.25
    ),
    medium: (
      font-size: 1.5rem, // 24px
      line-height: 1.25
    )
  ),
  beta: (
    small: (
      font-size: 1.5rem, // 24px
      line-height: 1.25
    ),
    medium: (
      font-size: 2rem, // 28px
      line-height: 1.25
    )
  ),
  alpha: (
    small: (
      font-size: 2rem, // 32px
      line-height: 1.25
    ),
    medium: (
      font-size: 2.5rem, // 40px
      line-height: 1.25
    )
  )
);

// lib/functions/_responsive.scss
@function breakpoint($breakpoint-name) {
  @return map-get($breakpoints, $breakpoint-name);
}

// lib/functions/_typography.scss
@function text-breakpoints-for($text-size) {
  @return map-get($text-sizing, $text-size);
}

@function text-properties-for($text-size, $breakpoint-name) {
  $text-breakpoints-map: text-breakpoints-for($text-size);
  @return map-get($text-breakpoints-map, $breakpoint-name);
}

// lib/mixins/_responsive.scss
@mixin respond-above($breakpoint-name) {
  @media screen and (min-width: breakpoint($breakpoint-name)) {
    @content;
  }
}

// lib/mixins/_typography.scss
@mixin text-size($text-size, $breakpoint-name: 'small') {
  $text-size-properties: text-properties-for($text-size, $breakpoint-name);
  font-size: map-get($text-size-properties, 'font-size');
  line-height: map-get($text-size-properties, 'line-height');
}

@mixin responsive-text-size($text-size, $default-breakpoint: 'small') {
  @include text-size($text-size, $default-breakpoint);

  $text-breakpoints-map: text-breakpoints-for($text-size);
  $text-breakpoints-keys: map-keys($text-breakpoints-map);

  @each $breakpoint-name in $text-breakpoints-keys {
    @if $breakpoint-name != $default-breakpoint and breakpoint($breakpoint-name) != null {
      @include respond-above($breakpoint-name) {
        @include text-size($text-size, $breakpoint-name);
      }
    }
  }
}

.t-serif {
  @include type-weight('regular');
  font-family:$fancy-serif-font-family;
}

.t-sans {
  font-family:$sans-font-family;
}

.t-alt-sans {
  font-family: $alt-font-family;
}  

.t-black {
   @include type-weight(black);
}

.t-bold {
   @include type-weight(bold);
}

.t-semi {
   @include type-weight(semi);
}

.t-normal {
  @include type-weight(regular);
}

.t-light {
  @include type-weight(light);
}

.t-caps {
  text-transform: uppercase;
}

.t-titled {
  text-transform: capitalize;
}

.t-shadow {
  text-shadow: 1px 2px 5px rgba(0,0,0,.5);
}

.two-column {
  -moz-column-count: 2;
  -moz-column-gap: 50px;
  -webkit-column-count: 2;
  -webkit-column-gap: 50px;

  ul, dl {
    -webkit-column-break-inside: avoid;
    -moz-column-break-inside: avoid;
    -moz-page-break-inside: avoid;
    page-break-inside: avoid;
  }
}

.no-wrap {
  white-space: nowrap;
}
